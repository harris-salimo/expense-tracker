name: CI

on:
  push:
    branches:
      - develop
      - master # Docker build/push will specifically trigger on 'master' branch pushes
    tags:
      - 'v*.*.*' # And on new version tags
  pull_request:
    branches:
      - develop
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # e.g., 'your-org/your-repo-name'

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Keep write permission if 'git-auto-commit-action' needs to push changes
      pull-requests: write # If 'git-auto-commit-action' also creates PRs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2
          coverage: xdebug

      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10.6.2
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install Node Dependencies
        run: pnpm install --frozen-lockfile

      - name: Format code
        run: pnpm format

      - name: Lint Frontend
        run: pnpm lint

      - name: Commit Changes # This step usually runs on 'pull_request' or 'push' to a feature branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'fix: correct code style'
          commit_options: '--no-verify'
          # This action requires 'contents: write' permission at the job level.
          # Consider whether you want this to run on every linting pass,
          # especially on 'master' branch, or only on feature branches/PRs.

  tests:
    runs-on: ubuntu-latest
    needs: lint # Ensure linting passes before running tests
    permissions:
      contents: read # Read access is sufficient for running tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10.6.2
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install Node Dependencies
        run: pnpm install --frozen-lockfile

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Build Assets
        run: pnpm build

      - name: Create database and run migrations
        run: touch database/database.sqlite && php artisan migrate --force

      - name: Cache Laravel Configurations
        run: php artisan optimize:clear && php artisan config:cache && php artisan route:cache && php artisan view:cache

      - name: Run Tests
        run: ./vendor/bin/pest

      - name: Delete database
        run: rm database/database.sqlite

  build:
    runs-on: ubuntu-latest
    needs: tests # This job runs only after 'tests' job completes successfully
    # Only run this job for 'master' branch pushes or tag pushes
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read # To checkout the repository code
      packages: write # To push Docker images to GitHub Packages (GHCR)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=semver,pattern=v{{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Path to the Dockerfile build context (usually your project root)
          push: true # Push the image to the registry
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # If your Dockerfile is not at the root, specify it:
          # file: ./docker/Dockerfile # e.g., if your Dockerfile is in a 'docker' directory
