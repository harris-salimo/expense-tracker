# Stage 1: Build PHP dependencies
FROM composer:lts AS vendor
WORKDIR /app
COPY composer.json composer.lock ./
RUN composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
COPY . .

# Stage 2: Build frontend assets (optional)
FROM node:lts-alpine AS frontend
WORKDIR /app
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
RUN npm install -g pnpm@10.6.2 && \
    pnpm install --frozen-lockfile
COPY . .
RUN pnpm build

# Stage 3: Final production image
FROM php:8.2-fpm-alpine AS production
RUN apk add --no-cache \
    bash \
    curl \
    libxml2-dev \
    file \
    libcurl \
    libpng-dev \
    libjpeg-turbo-dev \
    libzip-dev \
    oniguruma-dev \
    postgresql-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo \
    pdo_pgsql \
    zip \
    mbstring \
    curl \
    dom \
    fileinfo \
    && rm -rf /var/cache/apk/* # Clean up apk cache to keep image size small

WORKDIR /var/www/html

COPY --from=vendor /app /var/www/html
COPY --from=frontend /app/public /var/www/html/public

RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache && \
    chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

COPY docker/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini

USER www-data

EXPOSE 9000
CMD ["php-fpm"]
